{"version":3,"sources":["SchulteTable.js","utils.js","Settings.js","App.js","reportWebVitals.js","index.js"],"names":["SchulteTable","size","width","onComplete","generateNumbersGrid","arr","shuffled","i","length","j","Math","floor","random","temp","shuffleArray","Array","from","keys","reduce","acc","cur","push","adjustCellsFontSize","grid","document","querySelector","cellHeight","offsetHeight","setFontSize","resetTable","setCount","setGrid","useState","count","fontSize","useEffect","window","addEventListener","removeEventListener","className","style","role","map","row","n","col","onClick","Settings","onSizeChange","gridWidth","onGridWidthChange","value","onChange","event","parseInt","target","min","max","type","App","updateSettings","settings","localStorage","setItem","JSON","stringify","setSettings","parse","getItem","newSize","newWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.78130902.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { shuffleArray } from './utils';\nimport './SchulteTable.css';\n\nfunction SchulteTable({size=3, width=100, onComplete=()=>{}}) {\n  const generateNumbersGrid = () => {\n    return shuffleArray(Array.from(Array(size*size).keys()))\n      .reduce((acc, cur, i) => {\n        if (i % size === 0)\n          acc.push([]);\n        acc[acc.length - 1].push(cur);\n        return acc;\n      }, []);\n  };\n\n  const adjustCellsFontSize = () => {\n    const grid = document.querySelector('.schulte-table');\n    if (!grid) return;\n    const cellHeight = grid.offsetHeight / size;\n    setFontSize(cellHeight * 0.3);\n  };\n\n  const resetTable = () => {\n    setCount(0);\n    setGrid(generateNumbersGrid);\n  };\n\n  const [count, setCount] = useState(0);\n  const [grid, setGrid] = useState([]);\n  const [fontSize, setFontSize] = useState(12);\n\n  useEffect(() => {\n    resetTable();\n    adjustCellsFontSize();\n    window.addEventListener('load', adjustCellsFontSize);\n    window.addEventListener('resize', adjustCellsFontSize);\n\n    return () => {\n      window.removeEventListener('load', adjustCellsFontSize);\n      window.removeEventListener('resize', adjustCellsFontSize);\n    };\n  }, [size]);\n\n  useEffect(() => {\n    if (count === size*size) {\n      onComplete();\n      resetTable();\n    }\n  }, [count]);\n\n  useEffect(() => {\n    adjustCellsFontSize();\n  }, [width]);\n\n  return (\n    <div className=\"schulte-table\" style={{width: width + '%'}} role=\"grid\">\n      {grid.map((arr, row) => (\n        <div className=\"schulte-table__row\" role=\"row\" key={row}>\n          {arr.map((n, col) => (\n            <div\n              className=\"schulte-table__cell\"\n              onClick={() => { if (n === count) setCount(count + 1); }}\n              role=\"cell\"\n              style={ { fontSize } }\n              key={col}>\n              <div className=\"schulte-table__cell-text\">\n                {n+1}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default SchulteTable;\n","export function shuffleArray(arr) {\n  const shuffled = [...arr];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = shuffled[i];\n    shuffled[i] = shuffled[j];\n    shuffled[j] = temp;\n  }\n  return shuffled;\n}\n","import './Settings.css';\n\nfunction Settings({\n  size=3,\n  onSizeChange=()=>{},\n  gridWidth=100,\n  onGridWidthChange=()=>{}\n}) {\n  return (\n    <div className=\"settings\">\n      <label>\n        Grid Size\n        <input\n          value={size}\n          onChange={(event) => onSizeChange(parseInt(event.target.value))}\n          min=\"2\"\n          max=\"10\"\n          type=\"range\" />\n      </label>\n      <label>\n        Grid Width\n        <input\n          value={gridWidth}\n          onChange={(event) => onGridWidthChange(parseInt(event.target.value))}\n          type=\"range\" />\n      </label>\n    </div>\n  );\n}\n\nexport default Settings;\n","import { useState } from 'react';\nimport SchulteTable from './SchulteTable';\nimport Settings from './Settings';\nimport './App.css';\n\nfunction App() {\n  const updateSettings = (settings) => {\n    localStorage.setItem('settings', JSON.stringify(settings));\n    setSettings(settings);\n  };\n\n  const [settings, setSettings] = useState(\n    () => JSON.parse(localStorage.getItem('settings')) || {}\n  );\n\n  const onSizeChange = (newSize) =>\n    updateSettings({...settings, size: newSize});\n\n  const onGridWidthChange = (newWidth) =>\n    updateSettings({...settings, width: newWidth});\n\n  return (\n    <div className=\"app\">\n      <Settings\n        size={settings.size}\n        onSizeChange={onSizeChange}\n        gridWidth={settings.width}\n        onGridWidthChange={onGridWidthChange} />\n      <SchulteTable\n        size={settings.size}\n        width={settings.width} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}